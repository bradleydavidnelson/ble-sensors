#### Georgia Tech Strain Gauge v2.1.0D ##############################################################
# Author: Brad Nelson
#
# P0.0: ADC0: Strain Gauge
# P0.1: ADC1: 1.25V Supply
# P1.0: GPIO: Regulator Enable
###################################################################################################

# Hardware ports/pins
const ADC_STRAIN = 0
const ADC_RAIL = 1
const ADC_TEMP = 14
const GPIO_ENABLE_PORT = 1
const GPIO_ENABLE_PIN = $01
const I2C_AD5175 = $5C
# Control "register"
const CONTROL_WAKE_BIT = $01
const CONTROL_RESET_BIT = $10
# Variables
const DATA_HZ = 30
const STATUS_SEC = 10

dim dataPeriod
dim statusPeriod
dim dataPacket(20)
dim tempPacket(2)
dim railPacket(2)
dim pot(2)
dim position(2)
dim index
dim result
dim length
dim written
dim dataPending
dim tempPending
dim railPending
dim data

#### Sensor Sleep #################################################################################
procedure sensor_sleep()
	call hardware_io_port_write(GPIO_ENABLE_PORT, GPIO_ENABLE_PIN, $00) # Disable regulator
	call hardware_set_soft_timer(0,0,1) # Disable timers
	call hardware_set_soft_timer(0,1,1)
end

#### Sensor Wake ##################################################################################
procedure sensor_wake()
	call hardware_io_port_write(GPIO_ENABLE_PORT, GPIO_ENABLE_PIN, $FF) # Enable regulator
	call hardware_set_soft_timer(dataPeriod,0,1) # Enable timers
	call hardware_set_soft_timer(statusPeriod,1,1)
	call hardware_adc_read(ADC_TEMP,3,2)	# Read status temp
	call hardware_adc_read(ADC_RAIL,3,2)	# Read status rail
	
	# Disable write protection
	written = 0
	while written < 1
		call hardware_i2c_write(I2C_AD5175, 1, 2, "\x1C\x03")(written)
	end while
	
	pot(0:1) = position(0:1) | $04
	pot(1:1) = position(1:1)
	call hardware_i2c_write(I2C_AD5175, 1, 2, pot(0:2))
end

#### System Boot ##################################################################################
event system_boot(major, minor, patch, build, ll_version, protocol_version, hw)
	# Initialize variables
	dataPeriod = 32768 / DATA_HZ
	statusPeriod = 32768 * STATUS_SEC
	index = 0
	position(0:2) = 0
	
	dataPending = 0
	tempPending = 0
	railPending = 0
	
	# Start advertising in connectable mode
	call gap_set_adv_parameters(1600,1600,$07)
    call gap_set_mode(gap_general_discoverable,gap_undirected_connectable)
	
	# Configure GPIO - P1.0 as output
	call hardware_io_port_config_direction(GPIO_ENABLE_PORT, GPIO_ENABLE_PIN)

	# Disable peripheral power
	call hardware_io_port_write(GPIO_ENABLE_PORT, GPIO_ENABLE_PIN, $00)
end

#### Timer Interrupt Handler ######################################################################
event hardware_soft_timer(handle)
	# Timer 0
	if handle = 0 then
		call hardware_adc_read(ADC_STRAIN,3,0)
		
		call hardware_set_soft_timer(dataPeriod,0,1)
	end if
	
	# Timer 1
	if handle = 1 then
		call hardware_adc_read(ADC_RAIL,3,2)
		call hardware_adc_read(ADC_TEMP,3,2)
		
		call hardware_set_soft_timer(statusPeriod,1,1)
	end if
end

#### ADC Interrupt Handler ########################################################################
event hardware_adc_result(input,value)

	# Handle ADC0
	if input = ADC_STRAIN then
		# ADC value >> 4
#		dataPacket(index:2) = value / 16
		dataPacket(0:2) = value / 16
		
		# Increment packet index
#		index = index + 2

		call attributes_write(gatt_data,0,2,dataPacket(0:2))
		dataPending = 1
	end if
	
	# Handle ADC1
	if input = ADC_RAIL then
		railPacket(0:2) = value / 16
		
		call attributes_write(gatt_rail,0,2,railPacket(0:2))
		railPending = 1
	end if
	
	# Handle ADC14
	if input = ADC_TEMP then
		tempPacket(0:2) = value / 16
		
		call attributes_write(gatt_temp,0,2,tempPacket(0:2))
		tempPending = 1
	end if
	
	# Is the data packet full?
#	if index >= 19 then
#		# Transmit data
#		call attributes_write(gatt_data,0,20,dataPacket(0:20))
#		dataPending = 1
#		
#		# Reset index
#		index = 0
#	end if
end

#### ATT Client Indicated #########################################################################
event attclient_indicated(connection, attrhandle)
	if attrhandle = gatt_data then
		dataPending = 0
		
		if tempPending > 0 then
			call attributes_write(gatt_temp,0,2,tempPacket(0:2))
		end if
		if railPending > 0 then
			call attributes_write(gatt_rail,0,2,railPacket(0:2))
		end if
	end if
	
	if attrhandle = gatt_temp then
		tempPending = 0
		
		if dataPending > 0 then
			call attributes_write(gatt_data,0,2,dataPacket(0:2))
		end if
		if railPending > 0 then
			call attributes_write(gatt_rail,0,2,railPacket(0:2))
		end if
	end if
	
	if attrhandle = gatt_rail then
		railPending = 0
		
		if dataPending > 0 then
			call attributes_write(gatt_data,0,2,dataPacket(0:2))
		end if
		if tempPending > 0 then
			call attributes_write(gatt_temp,0,2,tempPacket(0:2))
		end if
	end if
end

#### GATT Update Handler ##########################################################################
event attributes_value(connection, reason, handle, offset, value_len, value_data)

	# Digital Potentiometer control
	if handle = gatt_pot then
		call hardware_i2c_write(I2C_AD5175, 1, 2, value_data(0:2))
		
		if (value_data(0:1) & $3C) = $04 then
			position(0:1) = value_data(0:1) & $03
			position(1:1) = value_data(1:1)
		end if
		
		# for debugging
		if (value_data(0:1) & $3C) = $08 then
			call hardware_i2c_write(I2C_AD5175, 0, 2, value_data(0:2))
			call hardware_i2c_read(I2C_AD5175, 1, 2)(result, length, position(0))
			call attributes_write(gatt_debug, 0, 2, position(0:2))
		end if
	end if
	
	# Control register:
	# Bit 0:	Sleep/Wake
	# Bit 1-3:	Not Used
	# Bit 4:	Reset
	# Bit 5-7:	Not Used
	if handle = gatt_control then
		# Reset Control
		if (value_data(0:1) & CONTROL_RESET_BIT) = CONTROL_RESET_BIT then
			call system_reset(0)	# Reset
		end if
		
		# Sleep/Wake Control
		if (value_data(0:1) & CONTROL_WAKE_BIT) = CONTROL_WAKE_BIT then
			call sensor_wake()
		end if
		if (value_data(0:1) & CONTROL_WAKE_BIT) = $00 then
			call sensor_sleep()
		end if
	end if
end

#### Disconnect Handler ###########################################################################
event connection_disconnected(connection,reason)
    
	# Start advertising again immediately
    call gap_set_mode(gap_general_discoverable,gap_undirected_connectable)
end
