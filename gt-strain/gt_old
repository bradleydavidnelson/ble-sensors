#### Georgia Tech Strain Gauge v2.1.0D ##############################################################
# Author: Brad Nelson
#
# P0.0: ADC0: Strain Gauge
# P1.0: GPIO: Regulator Enable
###################################################################################################

# Variables
const AD5175 = $5C
const measFreq = 10
dim packet(20)
dim pot(2)
dim tperiod
dim index
dim written
dim result
dim length

procedure write_protection_disable()
	# Disable write protection
	pot(0:1)=$1C
	pot(1:1)=$03
	written = 0
	while written < 1
		call hardware_i2c_write(potAddr, 1, 2, pot(0:2))(written)
	end while
	
	# Get value from 50-TP and transmit it
	# Get address of saved value
	call hardware_i2c_write(potAddr, 0, 2, "\x18\x00")
	call hardware_i2c_read(potAddr, 1, 2)(result, length, pot(0))
	# Read saved value
	pot(0:1)=$14
	call hardware_i2c_write(potAddr, 1, 2, pot(0:2))
	call hardware_i2c_read(potAddr, 1, 2)(result, length, pot(0))
	# Transmit value
	call attributes_write(gatt_pot, 0, length, pot(0:length))
end

#### System Boot ##################################################################################
# major				Major software version
# minor				Minor software version
# patch				Patch ID
# build				Build version
# ll_version		Link layer version
# protocol_version	BGAPI protocol version
# hw				Hardware version
###################################################################################################
event system_boot(major, minor, patch, build, ll_version, protocol_version, hw)
	# Initialize variables
	tperiod = 32768/measFreq
	index = 0
	
	# Start advertising in connectable mode
    call gap_set_mode(gap_general_discoverable,gap_undirected_connectable)
	
	# Configure GPIO - P1.0 as output
	call hardware_io_port_config_direction(1, $01)
	
	# Turn on regulator
	call hardware_io_port_write(1, $01, $01)
	
	# Disable write protection
	pot(0:1)=$1C
	pot(1:1)=$03
	written = 0
	while written < 1
		call hardware_i2c_write(potAddr, 1, 2, pot(0:2))(written)
	end while
	
	# Get value from 50-TP and transmit it
	# Get address of saved value
	call hardware_i2c_write(potAddr, 0, 2, "\x18\x00")
	call hardware_i2c_read(potAddr, 1, 2)(result, length, pot(0))
	# Read saved value
	pot(0:1)=$14
	call hardware_i2c_write(potAddr, 1, 2, pot(0:2))
	call hardware_i2c_read(potAddr, 1, 2)(result, length, pot(0))
	# Transmit value
	call attributes_write(gatt_pot, 0, length, pot(0:length))

	# Make sure regulator is off
	call hardware_io_port_write(1, $01, $00)
	
end

#### Timer Interrupt Handler ######################################################################
# handle			The software timer handle
###################################################################################################
event hardware_soft_timer(handle)
	if handle = 0 then
		call hardware_adc_read(0,3,2)
	end if
end

#### ADC Interrupt Handler ########################################################################
# input				The ADC input
# value				A/D value
###################################################################################################
event hardware_adc_result(input,value)

	# Handle ADC0
	if input = 0 then
		# ADC value >> 4
		packet(index:2) = value / 16
		
		# Increment packet index
		index = index + 2
	end if
	
	# Is the packet full?
	if index >= 19 then
		# Transmit data
		call attributes_write(gatt_packet,0,20,packet(0:20))
		
		# Reset index
		index = 0
	end if
end

#### GATT Update Handler ##########################################################################
# connection		Connection handle
# reason			Reason why value has changed (see API documentation)
# handle			Attribute handle which was changed
# offset			Offset into attribute value where data starts
# value_len			Length of attribute value
# value_data		Attribute value
###################################################################################################
event attributes_value(connection, reason, handle, offset, value_len, value_data)

	# Digital Potentiometer control
	if handle = gatt_pot then
		call hardware_i2c_write(potAddr, 1, 2, value_data(0:2))(written)
	end if
	
	# Control register:
	# Bit 0:	Sleep/Wake
	# Bit 1-3:	Not Used
	# Bit 4:	Reset
	# Bit 5-7:	Not Used
	if handle = gatt_control then
		# Reset Control
		if (value_data(0:1) & $10) = $10 then
			call system_reset(0)	# Reset
		end if
		
		# Sleep/Wake Control
		if (value_data(0:1) & $01) = $00 then
			call hardware_set_soft_timer(0,0,0) # Disable timer
			call hardware_io_port_write(1, $01, $00) # Disable regulator
		end if
		if (value_data(0:1) & $01) = $01 then
			call hardware_set_soft_timer(tperiod,0,0) # Enable timer
			call hardware_io_port_write(1, $01, $01) # Enable regulator
			call write_protection_disable()
		end if
	end if
end

#### Disconnect Handler ###########################################################################
# connection		Connection handle
# reason			Disconnect reason code (see API documentation)
###################################################################################################
event connection_disconnected(connection,reason)
    
	# Start advertising again immediately
    call gap_set_mode(gap_general_discoverable,gap_undirected_connectable)
end
